# Snakemake Workflow for RNA-Seq Data Processing
# Author: Yahel Godinez
# Institution: National Autonomous University of Mexico
# Department: Institute of Biotechnology
# Email: yahel.godinez@ibt.unam.mx
# Date: 23 January 2024
# 
# Description:
# This workflow processes RNA-Seq data from raw reads to a count table, 
# including quality control with FastQC, mapping with Bowtie2, and file 
# manipulations with Samtools. Generates output for downstream analysis.
#
# Tool Versions:
# - FastQC: v0.11.9
# - Bowtie2: v2.4.4
# - Samtools: v1.13
# - R: v4.3.1
#
# Required Directories:
# - data/: Contains raw .fastq.gz files.
# - fastqc_reports/: Stores quality control reports from FastQC.
# - mapped/: Contains intermediate mapping files (.sam and .bam).
# - stats/: Stores alignment statistics generated by Samtools flagstat.
# - coverage/: Contains coverage data for each transcript.
#
# Instructions:
# - Ensure all required tools are installed and accessible in your environment.
# - Run with Snakemake using the command: `snakemake --cores <num_cores>`
#
# Notes:
# - Update the file paths in the rules as needed to fit your directory structure.
# - This workflow has been tested on Linux Ubuntu 22.04.5 LTS and Conda version 23.7.3, 
#   but may be compatible with other systems.

import os

data_dir = "data/"

SAMPLES = set()
for filename in os.listdir(data_dir):
    if filename.endswith("_1.fastq.gz") or filename.endswith("_2.fastq.gz"):
        sample_name = filename.split('_')[0]
        SAMPLES.add(sample_name)

SAMPLES = sorted(list(SAMPLES))

READ1_FILES = expand("data/{sample}_1.fastq.gz", sample=SAMPLES)

rule all:
    input:
        "count_table.txt",
        expand("fastqc_reports/{sample}_1_fastqc.html", sample=SAMPLES),
        expand("fastqc_reports/{sample}_1_fastqc.zip", sample=SAMPLES),
        expand("stats/{sample}.flagstat", sample=SAMPLES)

rule fastqc:
    input:
        read1="data/{sample}_1.fastq.gz"
    output:
        html="fastqc_reports/{sample}_1_fastqc.html",
        zip="fastqc_reports/{sample}_1_fastqc.zip"
    params:
        outdir="fastqc_reports/"
    shell:
        "fastqc {input.read1} --outdir={params.outdir}"

rule map_sequences:
    input:
        read1="data/{sample}_1.fastq.gz",
        read2="data/{sample}_2.fastq.gz"
    output:
        temp("mapped/{sample}.sam")
    params:
        index="Index/L_vannamei",
        maxins=800,
        threads=workflow.cores
    shell:
        "bowtie2 --maxins {params.maxins} -t -x {params.index} -p {params.threads} --fr \
            -1 {input.read1} -2 {input.read2} > {output}"

rule convert_sam_to_bam:
    input:
        "mapped/{sample}.sam"
    output:
        temp("mapped/{sample}.bam")
    params:
        threads=workflow.cores/2
    shell:
        "samtools view -Sb -@ {params.threads} {input} > {output}"

rule sort_bam:
    input:
        "mapped/{sample}.bam"
    output:
        bam="mapped/{sample}.sorted.bam"
    params:
        threads=workflow.cores/2
    shell:
        "samtools sort -@ {params.threads} {input} -o {output}"

rule flagstat:
    input:
        "mapped/{sample}.sorted.bam"
    output:
        "stats/{sample}.flagstat"
    params:
        threads=workflow.cores/2
    shell:
        "samtools flagstat -@ {params.threads} {input} > {output}"

rule calculate_coverage:
    input:
        "mapped/{sample}.sorted.bam"
    output:
        cov="coverage/{sample}.All_transcripts"
    shell:
        "samtools coverage {input} | awk '{{print $1\"\\t\"$4}}' > {output}"

rule generate_count_table:
    input:
        expand("coverage/{sample}.All_transcripts", sample=SAMPLES)
    output:
        "count_table.txt"
    params:
        path="coverage/",
        ext=".All_transcripts",
        script="/scratch/yahelgb/Project_Lvannamei/scripts/generate_count_table.R"
    shell:
        "Rscript {params.script} {params.path} {params.ext} {output}"
